// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: account.sql

package migrate

import (
	"context"
)

const CreateAccount = `-- name: CreateAccount :one
INSERT INTO accounts (owner,
                      balance,
                      currency)
VALUES ($1,
        $2,
        $3) RETURNING id, owner, balance, currency, created_at
`

type CreateAccountParams struct {
	Owner    string  `json:"owner"`
	Balance  int64   `json:"balance"`
	Currency *string `json:"currency"`
}

// CreateAccount
//
//	INSERT INTO accounts (owner,
//	                      balance,
//	                      currency)
//	VALUES ($1,
//	        $2,
//	        $3) RETURNING id, owner, balance, currency, created_at
func (q *Queries) CreateAccount(ctx context.Context, arg *CreateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, CreateAccount, arg.Owner, arg.Balance, arg.Currency)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const DeleteAccount = `-- name: DeleteAccount :one
DELETE
FROM accounts
WHERE id = $1 RETURNING id, owner, balance, currency, created_at
`

// DeleteAccount
//
//	DELETE
//	FROM accounts
//	WHERE id = $1 RETURNING id, owner, balance, currency, created_at
func (q *Queries) DeleteAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, DeleteAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const GetAccount = `-- name: GetAccount :one
SELECT id, owner, balance, currency, created_at
FROM accounts
WHERE id = $1 LIMIT 1
`

// GetAccount
//
//	SELECT id, owner, balance, currency, created_at
//	FROM accounts
//	WHERE id = $1 LIMIT 1
func (q *Queries) GetAccount(ctx context.Context, id int64) (Account, error) {
	row := q.db.QueryRow(ctx, GetAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}

const ListAccounts = `-- name: ListAccounts :many
SELECT id, owner, balance, currency, created_at
FROM accounts
ORDER BY owner LIMIT 10
`

// ListAccounts
//
//	SELECT id, owner, balance, currency, created_at
//	FROM accounts
//	ORDER BY owner LIMIT 10
func (q *Queries) ListAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.Query(ctx, ListAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Currency,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const UpdateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET owner    = $2,
    balance  = $3,
    currency = $4
WHERE id = $1 RETURNING id, owner, balance, currency, created_at
`

type UpdateAccountParams struct {
	ID       int64   `json:"id"`
	Owner    string  `json:"owner"`
	Balance  int64   `json:"balance"`
	Currency *string `json:"currency"`
}

// UpdateAccount
//
//	UPDATE accounts
//	SET owner    = $2,
//	    balance  = $3,
//	    currency = $4
//	WHERE id = $1 RETURNING id, owner, balance, currency, created_at
func (q *Queries) UpdateAccount(ctx context.Context, arg *UpdateAccountParams) (Account, error) {
	row := q.db.QueryRow(ctx, UpdateAccount,
		arg.ID,
		arg.Owner,
		arg.Balance,
		arg.Currency,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Currency,
		&i.CreatedAt,
	)
	return i, err
}
